/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function __wbg_blockrange_free(a: number, b: number): void;
export function __wbg_get_blockrange_start(a: number): number;
export function __wbg_set_blockrange_start(a: number, b: number): void;
export function __wbg_get_blockrange_end(a: number): number;
export function __wbg_set_blockrange_end(a: number, b: number): void;
export function __wbg_syncinginfosnapshot_free(a: number, b: number): void;
export function __wbg_get_syncinginfosnapshot_stored_headers(a: number, b: number): void;
export function __wbg_set_syncinginfosnapshot_stored_headers(a: number, b: number, c: number): void;
export function __wbg_set_peertrackerinfosnapshot_num_connected_peers(a: number, b: number): void;
export function __wbg_set_peertrackerinfosnapshot_num_connected_trusted_peers(a: number, b: number): void;
export function __wbg_set_syncinginfosnapshot_subjective_head(a: number, b: number): void;
export function __wbg_get_peertrackerinfosnapshot_num_connected_peers(a: number): number;
export function __wbg_get_peertrackerinfosnapshot_num_connected_trusted_peers(a: number): number;
export function __wbg_get_syncinginfosnapshot_subjective_head(a: number): number;
export function __wbg_peertrackerinfosnapshot_free(a: number, b: number): void;
export function setup_logging(): void;
export function __wbg_nodeconfig_free(a: number, b: number): void;
export function __wbg_get_nodeconfig_network(a: number): number;
export function __wbg_set_nodeconfig_network(a: number, b: number): void;
export function __wbg_get_nodeconfig_bootnodes(a: number, b: number): void;
export function __wbg_set_nodeconfig_bootnodes(a: number, b: number, c: number): void;
export function __wbg_nodeclient_free(a: number, b: number): void;
export function nodeclient_new(a: number): number;
export function nodeclient_addConnectionToWorker(a: number, b: number): number;
export function nodeclient_isRunning(a: number): number;
export function nodeclient_start(a: number, b: number): number;
export function nodeclient_stop(a: number): number;
export function nodeclient_localPeerId(a: number): number;
export function nodeclient_peerTrackerInfo(a: number): number;
export function nodeclient_waitConnected(a: number): number;
export function nodeclient_waitConnectedTrusted(a: number): number;
export function nodeclient_networkInfo(a: number): number;
export function nodeclient_listeners(a: number): number;
export function nodeclient_connectedPeers(a: number): number;
export function nodeclient_setPeerTrust(a: number, b: number, c: number, d: number): number;
export function nodeclient_requestHeadHeader(a: number): number;
export function nodeclient_requestHeaderByHash(a: number, b: number, c: number): number;
export function nodeclient_requestHeaderByHeight(a: number, b: number): number;
export function nodeclient_requestVerifiedHeaders(a: number, b: number, c: number): number;
export function nodeclient_syncerInfo(a: number): number;
export function nodeclient_getNetworkHeadHeader(a: number): number;
export function nodeclient_getLocalHeadHeader(a: number): number;
export function nodeclient_getHeaderByHash(a: number, b: number, c: number): number;
export function nodeclient_getHeaderByHeight(a: number, b: number): number;
export function nodeclient_getHeaders(a: number, b: number, c: number, d: number, e: number): number;
export function nodeclient_getSamplingMetadata(a: number, b: number): number;
export function nodeclient_eventsChannel(a: number): number;
export function nodeconfig_default(a: number): number;
export function __wbg_nodeworker_free(a: number, b: number): void;
export function nodeworker_new(a: number): number;
export function nodeworker_run(a: number): number;
export function __wbg_networkinfosnapshot_free(a: number, b: number): void;
export function __wbg_get_networkinfosnapshot_connection_counters(a: number): number;
export function __wbg_set_networkinfosnapshot_connection_counters(a: number, b: number): void;
export function __wbg_connectioncounterssnapshot_free(a: number, b: number): void;
export function __wbg_get_connectioncounterssnapshot_num_connections(a: number): number;
export function __wbg_set_connectioncounterssnapshot_num_connections(a: number, b: number): void;
export function __wbg_get_connectioncounterssnapshot_num_pending(a: number): number;
export function __wbg_set_connectioncounterssnapshot_num_pending(a: number, b: number): void;
export function __wbg_get_connectioncounterssnapshot_num_pending_incoming(a: number): number;
export function __wbg_set_connectioncounterssnapshot_num_pending_incoming(a: number, b: number): void;
export function __wbg_get_connectioncounterssnapshot_num_pending_outgoing(a: number): number;
export function __wbg_set_connectioncounterssnapshot_num_pending_outgoing(a: number, b: number): void;
export function __wbg_get_connectioncounterssnapshot_num_established(a: number): number;
export function __wbg_set_connectioncounterssnapshot_num_established(a: number, b: number): void;
export function __wbg_get_connectioncounterssnapshot_num_established_incoming(a: number): number;
export function __wbg_set_connectioncounterssnapshot_num_established_incoming(a: number, b: number): void;
export function __wbg_get_connectioncounterssnapshot_num_established_outgoing(a: number): number;
export function __wbg_set_connectioncounterssnapshot_num_established_outgoing(a: number, b: number): void;
export function __wbg_set_networkinfosnapshot_num_peers(a: number, b: number): void;
export function __wbg_get_networkinfosnapshot_num_peers(a: number): number;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export const __wbindgen_export_2: WebAssembly.Table;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h17e3d468b80cfec8(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__Fn__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h8fba0fbbb2ce56f5(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h97503251cc26c7d8(a: number, b: number): void;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h75c81ac71a33052c(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h34cf51d8af2eb9c2(a: number, b: number): void;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h54e934330e7efee1(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h1816ecd417a1ddc0(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h09752d8f15282203(a: number, b: number, c: number): void;
export function _dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h7ea3881f612d7cca(a: number, b: number): void;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __wbindgen_exn_store(a: number): void;
export function wasm_bindgen__convert__closures__invoke2_mut__h1ca7c5479a4cc604(a: number, b: number, c: number, d: number): void;
export function __wbindgen_start(): void;
